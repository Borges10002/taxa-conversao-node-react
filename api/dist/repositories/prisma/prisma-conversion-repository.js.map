{"version":3,"sources":["../../../src/repositories/prisma/prisma-conversion-repository.ts","../../../src/lib/prisma.ts","../../../src/env/index.ts"],"sourcesContent":["import { prisma } from \"@/lib/prisma\";\r\nimport { Prisma, Event as PrismaEvent } from \"@prisma/client\";\r\nimport { ConversionRepository } from \"../conversion-repository\";\r\n\r\nexport class PrismaConversionRepository implements ConversionRepository {\r\n  async findById(id: number): Promise<PrismaEvent | null> {\r\n    const ckeckIn = await prisma.event.findUnique({ where: { id } });\r\n\r\n    return ckeckIn;\r\n  }\r\n\r\n  async getConversionRateOverTime(params: {\r\n    channel?: string | null;\r\n    status?: string | null;\r\n    startDate?: string | null;\r\n    endDate?: string | null;\r\n  }): Promise<any[]> {\r\n    const { channel, status, startDate, endDate } = params;\r\n\r\n    const whereConditions: string[] = [];\r\n    const queryParams: any[] = [];\r\n\r\n    // Adiciona condições apenas se os valores forem válidos\r\n    if (channel) {\r\n      console.log(\"aa\", channel);\r\n      whereConditions.push(`origin = $${whereConditions.length + 1}`);\r\n      queryParams.push(channel);\r\n    }\r\n\r\n    if (status !== undefined && status !== null && status !== \"\") {\r\n      whereConditions.push(\r\n        `response_status_id = $${whereConditions.length + 1}`\r\n      );\r\n      queryParams.push(parseInt(status, 10));\r\n    }\r\n\r\n    if (startDate) {\r\n      whereConditions.push(\r\n        `created_at >= $${whereConditions.length + 1}::date`\r\n      );\r\n      queryParams.push(startDate);\r\n    }\r\n\r\n    if (endDate) {\r\n      whereConditions.push(\r\n        `created_at <= $${whereConditions.length + 1}::date`\r\n      );\r\n      queryParams.push(endDate + \" 23:59:59\"); // Inclui todo o dia\r\n    }\r\n\r\n    const whereClause =\r\n      whereConditions.length > 0\r\n        ? `WHERE ${whereConditions.join(\" AND \")}`\r\n        : \"\";\r\n\r\n    const sql = `\r\n      SELECT\r\n        origin AS channel,\r\n        DATE_TRUNC('day', created_at) AS date,\r\n        COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) AS total_sent,\r\n        COUNT(*) FILTER (WHERE response_status_id = 6) AS total_viewed,\r\n        ROUND(\r\n          CASE WHEN COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) > 0\r\n            THEN COUNT(*) FILTER (WHERE response_status_id = 6)::numeric / \r\n                COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) * 100\r\n            ELSE 0\r\n          END, 2\r\n        ) AS conversion_rate\r\n      FROM \"event\" e\r\n      ${whereClause}\r\n      GROUP BY channel, date\r\n      ORDER BY date ASC\r\n    `;\r\n\r\n    return await prisma.$queryRawUnsafe<any[]>(sql, ...queryParams);\r\n  }\r\n\r\n  async create(data: Prisma.EventCreateInput): Promise<PrismaEvent> {\r\n    const event = await prisma.event.create({ data });\r\n    return event;\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport { env } from \"@/env\";\r\n\r\nexport const prisma = new PrismaClient({\r\n  log: env.NODE_ENV === \"dev\" ? [\"query\"] : [],\r\n});\r\n","import \"dotenv/config\";\r\nimport { z } from \"zod\";\r\n\r\nconst envSchema = z.object({\r\n  NODE_ENV: z.enum([\"dev\", \"test\", \"production\"]).default(\"dev\"),\r\n  PORT: z.coerce.number().default(3333)\r\n});\r\n\r\nconst _env = envSchema.safeParse(process.env);\r\n\r\nif (_env.success === false) {\r\n  console.error(\"❌ Invalid environment variables\", _env.error.format());\r\n\r\n  throw new Error(\"Invalid environment variables.\");\r\n}\r\n\r\nexport const env = _env.data;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;;;ACA7B,oBAAO;AACP,iBAAkB;AAElB,IAAM,YAAY,aAAE,OAAO;AAAA,EACzB,UAAU,aAAE,KAAK,CAAC,OAAO,QAAQ,YAAY,CAAC,EAAE,QAAQ,KAAK;AAAA,EAC7D,MAAM,aAAE,OAAO,OAAO,EAAE,QAAQ,IAAI;AACtC,CAAC;AAED,IAAM,OAAO,UAAU,UAAU,QAAQ,GAAG;AAE5C,IAAI,KAAK,YAAY,OAAO;AAC1B,UAAQ,MAAM,wCAAmC,KAAK,MAAM,OAAO,CAAC;AAEpE,QAAM,IAAI,MAAM,gCAAgC;AAClD;AAEO,IAAM,MAAM,KAAK;;;ADbjB,IAAM,SAAS,IAAI,2BAAa;AAAA,EACrC,KAAK,IAAI,aAAa,QAAQ,CAAC,OAAO,IAAI,CAAC;AAC7C,CAAC;;;ADDM,IAAM,6BAAN,MAAiE;AAAA,EACtE,MAAM,SAAS,IAAyC;AACtD,UAAM,UAAU,MAAM,OAAO,MAAM,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAE/D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,0BAA0B,QAKb;AACjB,UAAM,EAAE,SAAS,QAAQ,WAAW,QAAQ,IAAI;AAEhD,UAAM,kBAA4B,CAAC;AACnC,UAAM,cAAqB,CAAC;AAG5B,QAAI,SAAS;AACX,cAAQ,IAAI,MAAM,OAAO;AACzB,sBAAgB,KAAK,aAAa,gBAAgB,SAAS,CAAC,EAAE;AAC9D,kBAAY,KAAK,OAAO;AAAA,IAC1B;AAEA,QAAI,WAAW,UAAa,WAAW,QAAQ,WAAW,IAAI;AAC5D,sBAAgB;AAAA,QACd,yBAAyB,gBAAgB,SAAS,CAAC;AAAA,MACrD;AACA,kBAAY,KAAK,SAAS,QAAQ,EAAE,CAAC;AAAA,IACvC;AAEA,QAAI,WAAW;AACb,sBAAgB;AAAA,QACd,kBAAkB,gBAAgB,SAAS,CAAC;AAAA,MAC9C;AACA,kBAAY,KAAK,SAAS;AAAA,IAC5B;AAEA,QAAI,SAAS;AACX,sBAAgB;AAAA,QACd,kBAAkB,gBAAgB,SAAS,CAAC;AAAA,MAC9C;AACA,kBAAY,KAAK,UAAU,WAAW;AAAA,IACxC;AAEA,UAAM,cACJ,gBAAgB,SAAS,IACrB,SAAS,gBAAgB,KAAK,OAAO,CAAC,KACtC;AAEN,UAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAcR,WAAW;AAAA;AAAA;AAAA;AAKf,WAAO,MAAM,OAAO,gBAAuB,KAAK,GAAG,WAAW;AAAA,EAChE;AAAA,EAEA,MAAM,OAAO,MAAqD;AAChE,UAAM,QAAQ,MAAM,OAAO,MAAM,OAAO,EAAE,KAAK,CAAC;AAChD,WAAO;AAAA,EACT;AACF;","names":[]}