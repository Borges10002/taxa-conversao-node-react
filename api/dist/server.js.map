{"version":3,"sources":["../src/env/index.ts","../src/http/controllers/conversion/routes.ts","../src/lib/prisma.ts","../src/repositories/prisma/prisma-conversion-repository.ts","../src/use-cases/errors/id-already-exists.ts","../src/use-cases/create-conversion.ts","../src/use-cases/factories/make-create-conversion-use-case.ts","../src/http/controllers/conversion/create.ts","../src/use-cases/search-conversion.ts","../src/use-cases/factories/make-search-conversion-use-case.ts","../src/http/controllers/conversion/search.ts","../src/app.ts","../src/server.ts"],"sourcesContent":["import \"dotenv/config\";\r\nimport { z } from \"zod\";\r\n\r\nconst envSchema = z.object({\r\n  NODE_ENV: z.enum([\"dev\", \"test\", \"production\"]).default(\"dev\"),\r\n  PORT: z.coerce.number().default(3333)\r\n});\r\n\r\nconst _env = envSchema.safeParse(process.env);\r\n\r\nif (_env.success === false) {\r\n  console.error(\"❌ Invalid environment variables\", _env.error.format());\r\n\r\n  throw new Error(\"Invalid environment variables.\");\r\n}\r\n\r\nexport const env = _env.data;\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { ZodTypeProvider } from \"fastify-type-provider-zod\";\r\nimport z from \"zod\";\r\n\r\nimport { createConversionEvolution } from \"./create\";\r\nimport { getConversionEvolution } from \"./search\";\r\n\r\nexport async function conversionRoutes(app: FastifyInstance) {\r\n  app.withTypeProvider<ZodTypeProvider>().get(\r\n    \"/api/conversion\",\r\n    {\r\n      schema: {\r\n        summary: \"Get conversion evolution by channel\",\r\n        tags: [\"conversions\"],\r\n        querystring: z.object({\r\n          channel: z.string().optional(),\r\n          status: z.string().optional(),\r\n          startDate: z.string().optional(),\r\n          endDate: z.string().optional(),\r\n        }),\r\n        response: {\r\n          200: z.object({\r\n            conversion: z\r\n              .array(\r\n                z.object({\r\n                  date: z.string(),\r\n                  total_sent: z.number(),\r\n                  total_viewed: z.number(),\r\n                  conversion_rate: z.number(),\r\n                  channel: z.string(),\r\n                })\r\n              )\r\n              .optional(),\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    getConversionEvolution\r\n  );\r\n\r\n  app.withTypeProvider<ZodTypeProvider>().post(\r\n    \"/api/conversions\",\r\n    {\r\n      schema: {\r\n        summary: \"Create a new conversion\",\r\n        tags: [\"conversions\"],\r\n        body: z.object({\r\n          id: z.number(),\r\n          origin: z.string(),\r\n          response_status_id: z.number(),\r\n        }),\r\n        response: {\r\n          201: z.object({\r\n            message: z.string(),\r\n            entity: z.object({\r\n              id: z.string(), // Para o BigInt, podemos representá-lo como string\r\n              origin: z.string(),\r\n              response_status_id: z.number(),\r\n              created_at: z.string(),\r\n            }),\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    createConversionEvolution // Função para processar a criação da conversão\r\n  );\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport { env } from \"@/env\";\r\n\r\nexport const prisma = new PrismaClient({\r\n  log: env.NODE_ENV === \"dev\" ? [\"query\"] : [],\r\n});\r\n","import { prisma } from \"@/lib/prisma\";\r\nimport { Prisma, Event as PrismaEvent } from \"@prisma/client\";\r\nimport { ConversionRepository } from \"../conversion-repository\";\r\n\r\nexport class PrismaConversionRepository implements ConversionRepository {\r\n  async findById(id: number): Promise<PrismaEvent | null> {\r\n    const ckeckIn = await prisma.event.findUnique({ where: { id } });\r\n\r\n    return ckeckIn;\r\n  }\r\n\r\n  async getConversionRateOverTime(params: {\r\n    channel?: string | null;\r\n    status?: string | null;\r\n    startDate?: string | null;\r\n    endDate?: string | null;\r\n  }): Promise<any[]> {\r\n    const { channel, status, startDate, endDate } = params;\r\n\r\n    const whereConditions: string[] = [];\r\n    const queryParams: any[] = [];\r\n\r\n    // Adiciona condições apenas se os valores forem válidos\r\n    if (channel) {\r\n      console.log(\"aa\", channel);\r\n      whereConditions.push(`origin = $${whereConditions.length + 1}`);\r\n      queryParams.push(channel);\r\n    }\r\n\r\n    if (status !== undefined && status !== null && status !== \"\") {\r\n      whereConditions.push(\r\n        `response_status_id = $${whereConditions.length + 1}`\r\n      );\r\n      queryParams.push(parseInt(status, 10));\r\n    }\r\n\r\n    if (startDate) {\r\n      whereConditions.push(\r\n        `created_at >= $${whereConditions.length + 1}::date`\r\n      );\r\n      queryParams.push(startDate);\r\n    }\r\n\r\n    if (endDate) {\r\n      whereConditions.push(\r\n        `created_at <= $${whereConditions.length + 1}::date`\r\n      );\r\n      queryParams.push(endDate + \" 23:59:59\"); // Inclui todo o dia\r\n    }\r\n\r\n    const whereClause =\r\n      whereConditions.length > 0\r\n        ? `WHERE ${whereConditions.join(\" AND \")}`\r\n        : \"\";\r\n\r\n    const sql = `\r\n      SELECT\r\n        origin AS channel,\r\n        DATE_TRUNC('day', created_at) AS date,\r\n        COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) AS total_sent,\r\n        COUNT(*) FILTER (WHERE response_status_id = 6) AS total_viewed,\r\n        ROUND(\r\n          CASE WHEN COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) > 0\r\n            THEN COUNT(*) FILTER (WHERE response_status_id = 6)::numeric / \r\n                COUNT(*) FILTER (WHERE response_status_id IN (1, 5, 6)) * 100\r\n            ELSE 0\r\n          END, 2\r\n        ) AS conversion_rate\r\n      FROM \"event\" e\r\n      ${whereClause}\r\n      GROUP BY channel, date\r\n      ORDER BY date ASC\r\n    `;\r\n\r\n    return await prisma.$queryRawUnsafe<any[]>(sql, ...queryParams);\r\n  }\r\n\r\n  async create(data: Prisma.EventCreateInput): Promise<PrismaEvent> {\r\n    const event = await prisma.event.create({ data });\r\n    return event;\r\n  }\r\n}\r\n","export class IdAlreadyExists extends Error {\r\n  constructor() {\r\n    super(\"id already exists\");\r\n  }\r\n}\r\n","import { ConversionRepository } from \"@/repositories/conversion-repository\";\r\nimport { Event as PrismaEvent } from \"@prisma/client\";\r\nimport { IdAlreadyExists } from \"./errors/id-already-exists\";\r\n\r\ninterface CreateConversionUseCaseRequest {\r\n  id: number;\r\n  origin: string;\r\n  response_status_id: number;\r\n}\r\n\r\ninterface CreateConversionUseCaseResponse {\r\n  event: PrismaEvent;\r\n}\r\n\r\nexport class CreateConversionUseCase {\r\n  constructor(private conversionRepository: ConversionRepository) {}\r\n\r\n  async execute({\r\n    id,\r\n    origin,\r\n    response_status_id,\r\n  }: CreateConversionUseCaseRequest): Promise<CreateConversionUseCaseResponse> {\r\n    const ev = await this.conversionRepository.findById(id);\r\n\r\n    console.log(ev);\r\n\r\n    if (ev) {\r\n      throw new IdAlreadyExists();\r\n    }\r\n\r\n    const event = await this.conversionRepository.create({\r\n      id,\r\n      origin,\r\n      response_status_id,\r\n    });\r\n\r\n    return { event };\r\n  }\r\n}\r\n","import { PrismaConversionRepository } from \"@/repositories/prisma/prisma-conversion-repository\";\r\nimport { CreateConversionUseCase } from \"../create-conversion\";\r\n\r\nexport function makeCreateConversionUseCase() {\r\n  const conversionRepository = new PrismaConversionRepository();\r\n  const useCase = new CreateConversionUseCase(conversionRepository);\r\n\r\n  return useCase;\r\n}\r\n","import { makeCreateConversionUseCase } from \"@/use-cases/factories/make-create-conversion-use-case\";\r\nimport { FastifyReply, FastifyRequest } from \"fastify\";\r\nimport { z } from \"zod\";\r\n\r\nexport async function createConversionEvolution(\r\n  request: FastifyRequest,\r\n  reply: FastifyReply\r\n) {\r\n  const registerBodySchema = z.object({\r\n    id: z.number(),\r\n    origin: z.string(),\r\n    response_status_id: z.number(),\r\n  });\r\n\r\n  const { id, origin, response_status_id } = registerBodySchema.parse(\r\n    request.body\r\n  );\r\n\r\n  const createConversionUseCase = makeCreateConversionUseCase();\r\n\r\n  await createConversionUseCase.execute({\r\n    id,\r\n    origin,\r\n    response_status_id,\r\n  });\r\n\r\n  return reply.status(201).send();\r\n}\r\n","import { ConversionRepository } from \"@/repositories/conversion-repository\";\r\n\r\ninterface Request {\r\n  channel: string;\r\n  endDate: string;\r\n  startDate: string;\r\n  status: string;\r\n}\r\n\r\ninterface SearchConversioUseCaseResponse {\r\n  conversion: any[];\r\n}\r\n\r\nexport class SearchConversionUseCase {\r\n  constructor(private conversionRepository: ConversionRepository) {}\r\n\r\n  async execute(params: Request): Promise<SearchConversioUseCaseResponse> {\r\n    const result =\r\n      await this.conversionRepository.getConversionRateOverTime(params);\r\n\r\n    const conversion = result.map((row) => ({\r\n      channel: row.channel,\r\n      date: row.date,\r\n      total_sent: Number(row.total_sent),\r\n      total_viewed: Number(row.total_viewed),\r\n      conversion_rate: Number(row.conversion_rate),\r\n    }));\r\n\r\n    return {\r\n      conversion,\r\n    };\r\n  }\r\n}\r\n","import { PrismaConversionRepository } from \"@/repositories/prisma/prisma-conversion-repository\";\r\nimport { SearchConversionUseCase } from \"../search-conversion\";\r\n\r\nexport function makeConversionUseCase() {\r\n  const conversionRepository = new PrismaConversionRepository();\r\n\r\n  const useCase = new SearchConversionUseCase(conversionRepository);\r\n\r\n  return useCase;\r\n}\r\n","import { makeConversionUseCase } from \"@/use-cases/factories/make-search-conversion-use-case\";\r\nimport { FastifyReply, FastifyRequest } from \"fastify\";\r\nimport { string, z } from \"zod\";\r\n\r\nexport async function getConversionEvolution(\r\n  request: FastifyRequest,\r\n  reply: FastifyReply\r\n) {\r\n  const conversionQuerySchema = z.object({\r\n    channel: string().optional(),\r\n    status: string().optional(),\r\n    startDate: string().optional(),\r\n    endDate: string().optional(),\r\n  });\r\n\r\n  const { channel, endDate, startDate, status } = conversionQuerySchema.parse(\r\n    request.query\r\n  );\r\n\r\n  const searchConversionUseCase = makeConversionUseCase();\r\n\r\n  const { conversion } = await searchConversionUseCase.execute({\r\n    channel: String(channel),\r\n    status: String(status),\r\n    endDate: String(endDate),\r\n    startDate: String(startDate),\r\n  });\r\n\r\n  const formattedConversions = conversion.map((conversion) => ({\r\n    ...conversion,\r\n    date:\r\n      conversion.date instanceof Date\r\n        ? conversion.date.toISOString()\r\n        : conversion.date, // Converte para string ISO se for um objeto Date\r\n  }));\r\n\r\n  return reply.status(200).send({ conversion: formattedConversions });\r\n}\r\n","import { env } from \"@/env\";\r\nimport { conversionRoutes } from \"@/http/controllers/conversion/routes\";\r\nimport fastifyCors from \"@fastify/cors\";\r\nimport fastifySwagger from \"@fastify/swagger\";\r\nimport fastify from \"fastify\";\r\nimport { ZodError } from \"zod\";\r\n\r\nimport fastifySwaggerUI from \"@fastify/swagger-ui\";\r\nimport {\r\n  jsonSchemaTransform,\r\n  serializerCompiler,\r\n  validatorCompiler,\r\n} from \"fastify-type-provider-zod\";\r\n\r\nexport const app = fastify();\r\n\r\napp.register(fastifyCors, {\r\n  origin: \"*\",\r\n  credentials: true,\r\n});\r\n\r\napp.register(fastifySwagger, {\r\n  swagger: {\r\n    consumes: [\"application/json\"],\r\n    produces: [\"application/json\"],\r\n    info: {\r\n      title: \"Conversions\",\r\n      description:\r\n        \"Especificações da API para o back-end da aplicação Desafio Tech Lead: Evolução Temporal de taxa de conversão\",\r\n      version: \"1.0.0\",\r\n    },\r\n  },\r\n  transform: jsonSchemaTransform,\r\n});\r\n\r\napp.register(fastifySwaggerUI, {\r\n  routePrefix: \"/docs\",\r\n});\r\n\r\napp.setValidatorCompiler(validatorCompiler);\r\napp.setSerializerCompiler(serializerCompiler);\r\napp.register(conversionRoutes);\r\n\r\napp.setErrorHandler((error, _, reply) => {\r\n  if (error instanceof ZodError) {\r\n    return reply\r\n      .status(400)\r\n      .send({ message: \"Validation error.\", issues: error.format() });\r\n  }\r\n\r\n  if (env.NODE_ENV !== \"production\") {\r\n    console.error(error);\r\n  } else {\r\n    // TODO: Here we should log to a external tool like DataDog/NewRelic/Sentry\r\n  }\r\n\r\n  return reply.status(500).send({ message: \"Internal server error.\" });\r\n});\r\n","import { app } from \"./app\";\r\nimport { env } from \"./env\";\r\n\r\napp\r\n  .listen({\r\n    host: \"0.0.0.0\",\r\n    port: env.PORT,\r\n  })\r\n  .then(() => {\r\n    console.log(`🚀 HTTP Server Running - ${env.PORT}!`);\r\n  });\r\n"],"mappings":"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","names":["import_zod","import_zod","import_zod","conversion","app","z","import_zod","fastify","fastifyCors","fastifySwagger","fastifySwaggerUI"]}